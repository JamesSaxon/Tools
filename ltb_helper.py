#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os

parDict = {
  ")": "\\right) ", 
  "(": "\left( ", 
  "]": "\\right] ", 
  "[": "\left[ ", 
  "{": "left\{ ", 
  "}": "right\} "
}

symDict = {
  "¬Ω".decode('utf-8'): "\half ", 
  "‚Ñö".decode('utf-8'): "\mathbb{Q} ", 
  "‚Ñ§".decode('utf-8'): "\mathbb{Z} ", 
  "√ó".decode('utf-8'): "\\times ", 
  "‚â•".decode('utf-8'): "\geq ", 
  "‚â§".decode('utf-8'): "\leq ", 
  "‚Üí".decode('utf-8'): "\\rightarrow ", 
  "‚áí".decode('utf-8'): "\\thus ", 
  "‚üπ".decode('utf-8'): "\\thus ", 
  "‚à´".decode('utf-8'): "\int ", 
  "‚àÆ".decode('utf-8'): "\oint ", 
  "¬∑".decode('utf-8'): "\cdot ", 
  "¬±".decode('utf-8'): "\pm ", 
  "‚àì".decode('utf-8'): "\mp ", 
  "‚úî".decode('utf-8'): "\cmark ", 
  "‚úò".decode('utf-8'): "\\xmark ", 
  "‚óã".decode('utf-8'): "\pie{0}  {red} ", 
  "‚óî".decode('utf-8'): "\pie{90} {red} ", 
  "‚óë".decode('utf-8'): "\pie{180}{red} ", 
  "‚óï".decode('utf-8'): "\pie{270}{darkgreen} ", 
  "‚óè".decode('utf-8'): "\pie{360}{darkgreen} ", 
  "¬∞".decode('utf-8'): "\degree", 
  "‚âà".decode('utf-8'): "\\approx ", 
  "‚â°".decode('utf-8'): "\equiv ", 
  "‚àù".decode('utf-8'): "\propto ", 
  "‚àà".decode('utf-8'): "\in ", 
  "‚â†".decode('utf-8'): "\\neq ", 
  "‚àû".decode('utf-8'): "\infty ", 
  "‚àö".decode('utf-8'): "\sqrt ", 
  "ƒß".decode('utf-8'): "\hbar ", 
  "‚àá".decode('utf-8'): "\\nabla ", 
  "…Ü".decode('utf-8'): "\slashed{E}", 
  "‚Ñã".decode('utf-8'): "\mathcal{H} ", 
  "‚Ñí".decode('utf-8'): "\mathcal{L} ", 
  "ùí™".decode('utf-8'): "\mathcal{O} ", 
  "‚àÇ".decode('utf-8'): "\partial ", 
  "‚Ñì".decode('utf-8'): "\ell ",
  "√∑".decode('utf-8'): "\\frac",
  "‚ò∫".decode('utf-8'): "\smiley{}",
  "‚ïë".decode('utf-8'): "\parallel",
  "‚î¥".decode('utf-8'): "\\bot",
  "¬°".decode('utf-8'): "\\text{<}",
  "¬ø".decode('utf-8'): "\\text{>}",
  "¬ß".decode('utf-8'): "\S{}",
  "‚Äú".decode('utf-8'): "``",
  "‚Äù".decode('utf-8'): '"',
}

grDict = {
  "Œ±".decode('utf-8'): "\\alpha ",
  "Œ≤".decode('utf-8'): "\\beta ",
  "œà".decode('utf-8'): "\psi ",
  "Œ¥".decode('utf-8'): "\delta ",
  "Œµ".decode('utf-8'): "\\varepsilon ",
  "œµ".decode('utf-8'): "\\varepsilon ",
  "œÜ".decode('utf-8'): "\\varphi ",
  "Œ≥".decode('utf-8'): "\gamma ",
  "Œ∑".decode('utf-8'): "\eta ",
  "Œπ".decode('utf-8'): "\iota ",
  "Œæ".decode('utf-8'): "\\xi ",
  "Œ∫".decode('utf-8'): "\kappa ",
  "Œª".decode('utf-8'): "\lambda ",
  "¬µ".decode('utf-8'): "\mu ",
  "ŒΩ".decode('utf-8'): "\\nu ",
  "Œø".decode('utf-8'): "\omicron ",
  "œÄ".decode('utf-8'): "\pi ",
  "œÅ".decode('utf-8'): "\\rho ",
  "œÉ".decode('utf-8'): "\sigma ",
  "œÑ".decode('utf-8'): "\\tau ",
  "Œ∏".decode('utf-8'): "\\theta ",
  "œâ".decode('utf-8'): "\omega ",
  "œá".decode('utf-8'): "\chi ",
  "œÖ".decode('utf-8'): "\upsilon ",
  "Œ∂".decode('utf-8'): "\zeta ",
  "Œë".decode('utf-8'): "\Alpha ",
  "Œí".decode('utf-8'): "\Beta ",
  "Œ®".decode('utf-8'): "\Psi ",
  "Œî".decode('utf-8'): "\Delta ",
  "Œï".decode('utf-8'): "\Epsilon ",
  "Œ¶".decode('utf-8'): "\Phi ",
  "Œì".decode('utf-8'): "\Gamma ",
  "Œó".decode('utf-8'): "\Eta ",
  "Œô".decode('utf-8'): "\Iota ",
  "Œû".decode('utf-8'): "\Xi ",
  "Œö".decode('utf-8'): "\Kappa ",
  "Œõ".decode('utf-8'): "\Lambda ",
  "Œú".decode('utf-8'): "\Mu ",
  "Œù".decode('utf-8'): "\Nu ",
  "Œü".decode('utf-8'): "\Omicron ",
  "Œ†".decode('utf-8'): "\prod ",
  "Œ°".decode('utf-8'): "\Rho ",
  "Œ£".decode('utf-8'): "\sum ",
  "Œ§".decode('utf-8'): "\Tau ",
  "Œò".decode('utf-8'): "\Theta ",
  "Œ©".decode('utf-8'): "\Omega ",
  "Œß".decode('utf-8'): "\Chi ",
  "Œ•".decode('utf-8'): "\Upsilon ",
  "Œñ".decode('utf-8'): "\Zeta "
}

supDict = {
  "¬π".decode('utf-8'): "^1 ",
  "¬≤".decode('utf-8'): "^2 ",
  "¬≥".decode('utf-8'): "^3 ",
  "‚Å¥".decode('utf-8'): "^4 ",
  "‚Åµ".decode('utf-8'): "^5 ",
  "‚Å∂".decode('utf-8'): "^6 ",
  "‚Å∑".decode('utf-8'): "^7 ",
  "‚Å∏".decode('utf-8'): "^8 ",
  "‚Åπ".decode('utf-8'): "^9 ",
  "‚Å∞".decode('utf-8'): "^0 ",
  "‚úù".decode('utf-8'): "^\dagger ",
#  "*".decode('utf-8'): "^\star ",
  "‚Å∫".decode('utf-8'): "^+ ",
  "‚Åª".decode('utf-8'): "^- ",
  "·µÄ".decode('utf-8'): "^T ",
}

subDict = {
  "‚ÇÅ".decode('utf-8'): "_1 ",
  "‚ÇÇ".decode('utf-8'): "_2 ",
  "‚ÇÉ".decode('utf-8'): "_3 ",
  "‚ÇÑ".decode('utf-8'): "_4 ",
  "‚ÇÖ".decode('utf-8'): "_5 ",
  "‚ÇÜ".decode('utf-8'): "_6 ",
  "‚Çá".decode('utf-8'): "_7 ",
  "‚Çà".decode('utf-8'): "_8 ",
  "‚Çâ".decode('utf-8'): "_9 ",
  "‚ÇÄ".decode('utf-8'): "_0 ",
  "·µ¢".decode('utf-8'): "_i ",
  "‚±º".decode('utf-8'): "_j ",
}

accDict = {
  "√°".decode('utf-8'): "\\'a",
  "√†".decode('utf-8'): "\`a",
  "√©".decode('utf-8'): "\\'e",
  "√®".decode('utf-8'): "\`e",
  "√Ø".decode('utf-8'): "\\\"i",
  "√º".decode('utf-8'): "\\\"u",
  "√§".decode('utf-8'): "\\\"a",
}

modDict = {
  u"\u20D7": "\\bm",
  u"\u0305": "\\overline",
  u"\u0307": "\dot",
  u"\u0308": "\ddot",
  u"\u0338": "\slashed",
  u"\u0303": "\\tilde",
  u"\u0302": "\\hat"
}

#########################################################
#########################################################

def ToTeX(line):

  line = ModifiersAndParentheses(line)
  line = SubsAndSupers(line)
  return SymbolReplacement(line)

#########################################################
#########################################################

# Modifiers are a bit funny -- we need to swap the order.
def ModifierReplacement(line):

  for m, v in modDict.iteritems():
    while m in line:
      pos = line.find(m)
      line = line[0:pos-1] + modDict[line[pos]] + " " + line[pos-1] + line[pos+1:]

  return line

#def FixParentheses(line):
#  # Aside that, get the parenthesis out of the way -- they'll mess up the sub/supers.
#  temp = ""
#  for i in range(len(line)):
#    if line[i] not in parDict or \
#      (FORMAT is not TYPES.index("equation") and FORMAT is not TYPES.index("numequation") and FORMAT is not TYPES.index("boxed") and FORMAT is not TYPES.index("align") and FORMAT is not TYPES.index("numalign") and (line[:i].count("$") % 2) == 0) or \
#      (line[i] in ["}", "{"] and line[i-1] != "\\") or \
#      (line[i] in [")", "("] and line[i-1] == "\\"):
#      temp += line[i]
#    else:
#      temp += parDict[line[i]]
#
#  return temp

#########################################################
#########################################################

def SubsAndSupers(line):

  line += " "
  i = 0
  while i < len(line):
    count = 0
    if line[i] in supDict:
      count = 1
      temp = supDict[line[i]]
      while line[i+count] in supDict:
        temp += supDict[line[i+count]]
        count += 1
      temp = "^{" + temp.replace("^", "") + "} "
      line = line[0:i] + temp + line[i+count:]
    i += 1 + 2 * count
      
  i = 0
  while i < len(line):
    count = 1
    if line[i] in subDict:
      temp = subDict[line[i]]
      while line[i+count] in subDict:
        temp += subDict[line[i+count]]
        count += 1
      temp = "_{" + temp.replace("_", "") + "} "
      line = line[0:i] + temp + line[i+count:]
    i += count

  return line

#########################################################
#########################################################

def SymbolReplacement(line):

  line = SubsAndSupers(line)

  texline = ""
  for i in range(len(line)):
    if line[i] in accDict:
      texline += accDict[line[i]]
    elif line[i] in grDict:
      texline += grDict[line[i]]
    elif line[i] in symDict:
      texline += symDict[line[i]]
    else:
      texline += line[i]

  return texline.strip()




